version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ally
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: allyhub
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - postgres-data:/var/lib/postgresql/data

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    ports: ["6379:6379"] # For running local tests

  scoring-service:
    build:
      context: ..
      dockerfile: services/scoring-service/Dockerfile
    env_file:
      - ./.env
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:8081/health').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"]
      interval: 10s
      timeout: 3s
      retries: 10
    volumes:
      - ../services/scoring-service/src:/app/services/scoring-service/src:ro

  sentiment:
    build:
      context: ..
      dockerfile: services/sentiment-service/Dockerfile
      args:
        SPACY_MODEL: ${SPACY_MODEL:-en_core_web_sm}
    image: ally/sentiment-service:local
    env_file:
      - ./.env
    ports:
      - "8080:8080"
    volumes:
      - hf-cache:/hf-cache
      - ../infra/custom_entities.jsonl:/app/infra/custom_entities.jsonl:ro
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2g

  ingestion-service:
    build:
      context: ..
      dockerfile: services/ingestion-service/Dockerfile
    env_file:
      - ./.env
    ports:
      - "8082:8082"
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512m

  shade-agent:
    build:
      context: ../services/shade-agent
      dockerfile: Dockerfile
    env_file:
      - ./.env
    ports:
      - "8090:8090"
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:8090/:healthz').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"]
      interval: 10s
      timeout: 3s
      retries: 10
    # Note: TEE service should be running locally on port 3140
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512m
    restart: unless-stopped

  admin-service:
    build:
      context: ..
      dockerfile: services/admin-service/Dockerfile
    env_file:
      - ./.env
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "fetch('http://localhost:8083/health').then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"]
      interval: 10s
      timeout: 3s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512m
    restart: unless-stopped



volumes:
  hf-cache:
  postgres-data:


