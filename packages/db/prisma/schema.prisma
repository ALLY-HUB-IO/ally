// Datasource and generator
datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Core entities
model User {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  wallet       String?    @unique
  displayName  String?
  trust        Float      @default(0)
  
  platformUsers PlatformUser[]
  payouts       Payout[]
  
  @@index([wallet])
  @@index([trust])
}

model PlatformUser {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  platform     String
  platformId   String
  displayName  String?
  avatarUrl    String?
  
  messages     Message[]
  scores       Score[]
  reactions    Reaction[]
  payouts      Payout[]
  
  @@unique([platform, platformId])
  @@index([userId])
  @@index([platform, platformId])
}

model Source {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  platform     String
  platformId   String
  name         String?
  description  String?
  isActive     Boolean    @default(true)
  projectId    String
  crawlConfig  Json?
  
  messages     Message[]
  checkpoints  IngestCheckpoint[]
  
  @@unique([platform, platformId])
  @@index([projectId, isActive])
  @@index([platform, isActive])
}

model Message {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  projectId    String
  sourceId     String
  source       Source     @relation(fields: [sourceId], references: [id])
  externalId   String
  authorId     String
  author       PlatformUser @relation(fields: [authorId], references: [id])
  content      String
  contentLang  String?
  isDeleted    Boolean    @default(false)
  
  scores       Score[]
  reactions    Reaction[]
  relationsFrom MessageRelation[] @relation("from")
  relationsTo   MessageRelation[] @relation("to")
  discordDetails DiscordMessageDetail?
  metricSnapshots MetricSnapshot[]
  
  @@unique([sourceId, externalId])
  @@index([authorId, createdAt])
  @@index([sourceId, createdAt])
  @@index([isDeleted, createdAt])
  @@index([projectId, createdAt])
}

model Reaction {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  
  kind         String
  weight       Float?     @default(1)
  
  messageId    String
  message      Message    @relation(fields: [messageId], references: [id])
  platformUserId String
  platformUser PlatformUser @relation(fields: [platformUserId], references: [id])
  
  @@unique([messageId, platformUserId, kind])
  @@index([messageId, kind])
  @@index([platformUserId, kind])
  @@index([messageId, platformUserId])
}

model Score {
  id             String     @id @default(cuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  kind           String
  value          Float
  messageId      String
  message        Message    @relation(fields: [messageId], references: [id])
  platformUserId String
  platformUser   PlatformUser @relation(fields: [platformUserId], references: [id])
  details        Json?
  
  @@index([messageId, kind])
  @@index([platformUserId, kind])
  @@index([messageId, platformUserId])
}

model MessageRelation {
  id       String       @id @default(cuid())
  kind     RelationKind
  fromId   String
  toId     String
  from     Message      @relation("from", fields: [fromId], references: [id])
  to       Message      @relation("to", fields: [toId], references: [id])
  
  @@index([fromId, kind])
  @@index([toId, kind])
  @@index([kind])
}

model DiscordMessageDetail {
  messageId     String   @id
  message       Message  @relation(fields: [messageId], references: [id])
  guildId       String?
  channelId     String?
  threadId      String?
  embeds        Json?
  attachments   Json?
  
  @@index([guildId])
  @@index([channelId])
  @@index([threadId])
}

model MetricSnapshot {
  id          String   @id @default(cuid())
  messageId   String
  message     Message  @relation(fields: [messageId], references: [id])
  capturedAt  DateTime @default(now())
  likeCount   Int?
  replyCount  Int?
  repostCount Int?
  quoteCount  Int?
  viewCount   Int?
  meta        Json?

  @@index([messageId, capturedAt])
}

model IngestCheckpoint {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  sourceId     String
  source       Source     @relation(fields: [sourceId], references: [id])
  
  lastMessageId String?
  lastTimestamp DateTime?
  cursor        String?
  status        String    @default("active")
  
  errorCount    Int       @default(0)
  lastError     String?
  lastErrorAt   DateTime?
  
  @@unique([sourceId])
  @@index([status, updatedAt])
}

// Event persistence for audit trail
model EventsRaw {
  id              String   @id @default(cuid())
  idempotencyKey  String   @unique
  projectId       String
  platform        String
  type            String
  ts              DateTime
  source          Json
  payload         Json
  createdAt       DateTime @default(now())

  @@index([projectId, platform])
  @@index([type, ts])
  @@index([projectId, ts])
}

// Admin users for the admin interface
model Admin {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  email        String     @unique
  name         String
  passwordHash String
  isActive     Boolean    @default(true)
  lastLoginAt  DateTime?
  
  campaigns    Campaign[]
  payouts      Payout[]
}

// Token reward campaigns
model Campaign {
  id                String     @id @default(cuid())
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  name              String
  description       String?
  tokenSymbol       String
  isNative          Boolean    @default(false)
  chainId           String?
  tokenAddress      String?
  totalRewardPool   String
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean    @default(true)
  minScore          Float?
  maxRewardsPerUser String?
  timeframe         Int
  platforms         String[]
  createdById       String
  createdBy         Admin      @relation(fields: [createdById], references: [id])
  
  payouts           Payout[]
  
  @@index([startDate, endDate])
  @@index([isActive])
  @@index([platforms])
}

// Individual payouts to users
model Payout {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  payoutAt       DateTime?
  status         PayoutStatus @default(PENDING)
  periodStart    DateTime
  periodEnd      DateTime
  platformUserId String
  platformUser   PlatformUser @relation(fields: [platformUserId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  campaignId     String
  campaign       Campaign     @relation(fields: [campaignId], references: [id])
  amount         String
  txHash         String?
  errorMessage   String?
  processedById  String?
  processedBy    Admin?       @relation(fields: [processedById], references: [id])
  
  @@index([userId, campaignId])
  @@index([status])
  @@index([createdAt])
  @@index([periodStart, periodEnd])
  @@index([platformUserId, campaignId])
}

// System configuration and settings
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  updatedAt DateTime @updatedAt
  
  @@index([key])
}

// Enums
enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum RelationKind {
  REPLY_TO
  QUOTE_OF
  RETWEET_OF
  REPOST_OF
  THREAD_PARENT
  MENTIONS
}